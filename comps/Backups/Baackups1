// import AsyncStorage from '@react-native-async-storage/async-storage';
// import auth from '@react-native-firebase/auth';
// import React,{Component,useState} from "react";
// import {TextInput,
//         KeyboardAvoidingView,
//         TouchableWithoutFeedback,
//         Text, 
//         View,
//         StyleSheet,
//         Keyboard,
//         TouchableOpacity,
//         ScrollView,
//         ToastAndroid,
//       } from 'react-native';
// import Termsconds from './terms&conditions';


// export default class Loginpage extends Component{

//   // const [number,setNumber]= useState("")
//   // const [confirm,setConfirm]= useState(null)
  
//    constructor(props){
//      super(props)
//      this.state={
//       setNumber:"",
//      // setConfirm:null,
//      }
//    }

  



  
//    Signin = async()=>{
//      const {setNumber} =this.state 
//     const confirmation = await auth().signInWithPhoneNumber("+91"+setNumber);
//     if (confirmation._auth._authResult){
//       this.props.navigation.navigate('OTP',{"confirm":confirmation,"number":setNumber})
//     }else{
//       console.log("Error")
//     }
//   }

//   LengthChecker=()=>{
//   //  const {setNumber} =this.state 
//     ToastAndroid.show("Please Enter a Valid Mobile Number",ToastAndroid.SHORT)
//   //console.log(setNumber)
// }


//   render(){
//    return(
// <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
//   <View style = {styles.mainview}>{/* The whole page View*/}
//     <KeyboardAvoidingView>   
//       <Text style={styles.text}>
//         Give us  
//       </Text>
//           <Text style={styles.urmobno}>
//             Your Mobile Number
//           </Text>
//               <Text style={styles.coats}>
//                   Active Mobile Number is {"\n"}needed to 
//               </Text>
//                   <TextInput style ={styles.input}
//                     placeholder="Enter Your Mobile Number"
//                     onChangeText= {(setNumber)=> this.setState({setNumber:setNumber})}  
//                     placeholderTextColor="grey"
//                     autoFocus={true}
//                     maxLength={10}
//                     onEndEditing={Keyboard.dismiss}
//                     keyboardType={"numeric"}>
//                   </TextInput>
//     </KeyboardAvoidingView>
//              <View style={styles.bottomView}>
//                         <TouchableOpacity 
//                           style={styles.button}
                          
//                            onPress ={this.Signin}>
//                             <Text style={styles.textagree}>
//                               Agree & Continue 
//                               </Text>
//                           </TouchableOpacity>
                        
//                             <ScrollView  style={{flexGrow:100}}>
//                               <Termsconds/>
//                             </ScrollView>
//                         </View>
                          
//   </View>
// </TouchableWithoutFeedback>);}
    
  
// };

// const styles =StyleSheet.create({
//   text:{
//     color:"grey",
//     fontSize:35,
//     fontWeight:"bold",
//     marginLeft:10,
//     marginTop:2,
//     fontFamily:"sans-serif-medium"
//   },

//   mainview :{
//     flex :1,
//     backgroundColor:"#000000",  
//   },
//   urmobno:{
//     fontSize:25,
//     color:"white",
//     fontWeight:"bold",
//     marginLeft:10,
//     fontFamily:"sans-serif"
//   },
//   coats:{
//     color:"white",
//     marginLeft:10,
//     marginTop:5,
//     fontSize:18
//   },
//   input:{
//     marginLeft:5,
//     height:"30%",
//     fontSize:25,
//     width:"100%",
//     color:"white",
   
//   },
//   bottomView:{
//     width: '100%',
//     height: "30%",
//     flex: 1 ,
//     backgroundColor: "#1C1C1E",
//     borderTopRightRadius:25,
//     borderTopLeftRadius:25,
//     bottom:0, 
//     elevation:1,
   
//   },
//   button:{
//     borderRadius:25,
//     borderWidth:2,
//     borderColor:"#0276FD",
//     backgroundColor:"black",
//     width:"60%",
//     height:"15%",
//     justifyContent:"center",
//     alignItems:'center',
//     marginTop:"2%",
//     marginLeft:"2%",
//     elevation:50,
//   },
//   textagree:{
//     color:"white",
//     fontSize:25,
//   },
  
// });


 App Js 

 import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthContext } from './comps/utils';
import React, { useEffect } from 'react';
import { View, Text ,ToastAndroid } from 'react-native';
import { 
  NavigationContainer, 
} from '@react-navigation/native';
import { AuthStackNavigator } from './Navigators/AuthStackNavigtor';
import { RootStackNavigator } from './Navigators/RootStackNavigator';


const App = () => {
  
  
    const initialLoginState = {
      isLoading: true,
      userToken: null,
    };
  
   
    
  
    const loginReducer = (prevState, action) => {
      switch( action.type ) {
        case 'RETRIEVE_TOKEN': 
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'LOGIN': 
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'LOGOUT': 
          return {
            ...prevState,
            userToken: null,
            isLoading: false,
          };
      }
    };
  
    const [loginState, dispatch] = React.useReducer(loginReducer, initialLoginState);
  
    const authContext = React.useMemo(() => ({
      signIn: async(OTPNUMBER,Confirm,PHONENUMBER) => {
         let userToken;
        try {
            userToken = PHONENUMBER;
            let data = await Confirm.confirm(OTPNUMBER) & AsyncStorage.setItem("userToken",userToken);
            console.log("data", data);
            Alert.alert("Validation",
            "The user has been Validated")
         } catch (error) {
         console.log('Invalid code.');
         ToastAndroid.show('Invalid code.',ToastAndroid.SHORT)
         }
               







    //     const userToken = PhoneNumber;
        
        
        // try {
        //     //let data = await Confirm.confirm(OtpNumber) & await AsyncStorage.setItem('userToken', userToken);
        // } catch(e) {
        //   console.log(e);
        //   ToastAndroid.show('Invalid code.',ToastAndroid.SHORT)
        // } 




        
        dispatch({ type: 'LOGIN', token:userToken});
      },
      signOut: async() => {
        
        try {
          await AsyncStorage.removeItem('userToken');
        } catch(e) {
          console.log(e);
        }
        dispatch({ type: 'LOGOUT' });
      },
      signUp: () => {
       
      },
     
    }), []);
  
    useEffect(() => {
      setTimeout(async() => {
       
        let userToken;
        userToken = null;
        try {
          userToken = await AsyncStorage.getItem('userToken');
        } catch(e) {
          console.log(e);
        }
        
        dispatch({ type: 'RETRIEVE_TOKEN', token: userToken });
      }, 1000);
    }, []);
  
    if( loginState.isLoading ) {
      return(
        <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
          <Text>Loading...</Text>
        </View>
      );
    }
    return (
      
      <AuthContext.Provider value={authContext}>
      <NavigationContainer >
        { loginState.userToken != null ? (
          <RootStackNavigator/>
        )
      :
        <AuthStackNavigator/>
      }
      </NavigationContainer>
      </AuthContext.Provider>

    );
  }
  
  export default App;


// App
  import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthContext } from './comps/utils';
import React, { useEffect } from 'react';
import {StatusBar, View, Text ,ToastAndroid } from 'react-native';
import { 
  NavigationContainer, 
} from '@react-navigation/native';
import { AuthStackNavigator } from './Navigators/AuthStackNavigtor';
import { RootStackNavigator } from './Navigators/RootStackNavigator';
import { OnBoardStackNavigator } from './Navigators/OnBoardNavigator';

const App = () => {
  
  
    const initialLoginState = {
      isLoading: true,
      userToken: null,
    };
  
   
    
  
    const loginReducer = (prevState, action) => {
      switch( action.type ) {
        case 'RETRIEVE_TOKEN': 
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'LOGIN': 
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'LOGOUT': 
          return {
            ...prevState,
            userToken: null,
            isLoading: false,
          };
        case "OnBoard":
          return{
             ...prevState,
             onboardtoken:null,
             isLoading:false,
          };
      }
    };
  
    const [loginState, dispatch] = React.useReducer(loginReducer, initialLoginState);
  
    const authContext = React.useMemo(() => ({
      signIn: async(OtpNumber,Confirm,PhoneNumber) => {
       
         console.log(Confirm);
        try {
          
        let data =  await Confirm.confirm(OtpNumber) & await AsyncStorage.setItem("userToken",PhoneNumber); 
         }catch (error) {
         console.log('Invalid code.');
         ToastAndroid.show('Invalid code.',ToastAndroid.SHORT)
         }
    //     const userToken = PhoneNumber;
        
        
        // try {
        //     //let data = await Confirm.confirm(OtpNumber) & await AsyncStorage.setItem('userToken', userToken);
        // } catch(e) {
        //   console.log(e);
        //   ToastAndroid.show('Invalid code.',ToastAndroid.SHORT)
        // } 
        dispatch({ type: 'LOGIN', token: PhoneNumber});
      },
      signOut: async() => {
        
        try {
          await AsyncStorage.removeItem('userToken');
        } catch(e) {
          console.log(e);
        }
        dispatch({ type: 'LOGOUT' });
      },
      OnBoarded: async() => {
        let onboardtoken = null;
        try{
        onboardtoken = "BOARDED";
         await AsyncStorage.setItem("onbaoredtoken",onboardtoken)
       }catch(e){null}
       dispatch({ type: 'OnBoard', token:onboardtoken});
      },
     
    }), []);
  
    useEffect(() => {
      setTimeout(async() => {
       
        let userToken;
        userToken = null;
        try {
          userToken = await AsyncStorage.getItem('userToken');
        } catch(e) {
          console.log(e);
        }
        
        dispatch({ type: 'RETRIEVE_TOKEN', token: userToken });
      }, 1000);
    }, []);
  
    if( loginState.isLoading ) {
      return(
        <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
          <Text>Loading...</Text>
        </View>
      );
    }
    return (
         
      <AuthContext.Provider value={authContext}>
      <NavigationContainer >
         {/* {loginState.onboardtoken ==null?(<OnBoardStackNavigator/>)
         :<OnBoardStackNavigator/>} */}


        { loginState.userToken != null ? (
          <RootStackNavigator/>
        )
      :
        <AuthStackNavigator/>
      }
      </NavigationContainer>
      </AuthContext.Provider>
      


    );
  }
  
  export default App;

